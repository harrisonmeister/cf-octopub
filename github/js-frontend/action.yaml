name: Docker Build and Push
description: Build the JavaScript frontend
inputs:
  run_number:
    required: true
    description: The GitHub Actions Workflow run number
  dockerhub_username:
    description: 'The dockerhub username'
    required: true
  dockerhub_password:
    description: 'The dockerhub password'
    required: true
  codefresh_token:
    description: 'The codefresh token'
    required: true
  github_codefresh_token:
    description: 'The github codefresh token'
    required: true
  gitops_repo:
    description: 'The gitops repo'
    required: true
  gitops_repo_service_directory:
    description: 'The directory holding the gitops application'
    required: true    
  gitops_repo_username:
    description: 'The github repo username'
    required: true  
  gitops_repo_user_email:
    description: 'The github repo user email'
    required: true      
  gitops_repo_user_token:
    description: 'The github repo user token'
    required: true
  gitops_commit_message:
    description: 'The last commit message to the application repository'
    required: true   

runs:
  using: "composite"
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ inputs.dockerhub_username }}
        password: ${{ inputs.dockerhub_password }}

    - name: Clone code repo
      uses: actions/checkout@v4

    - uses: actions/setup-node@v3
      with:
        node-version: 19
        cache: 'npm'
        cache-dependency-path: js/frontend/yarn.lock

    - name: Get branch name
      id: branch-name
      uses: tj-actions/branch-names@v7

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0.9.15
      with:
        versionSpec: 5.x

    - name: Set Package Version
      run: echo "PACKAGE_VERSION=$(date +'%Y%m%d').${{ github.run_number }}.${{ github.run_attempt }}" >> $GITHUB_ENV
      shell: bash


    - name: Install modules
      run: yarn install
      shell: bash
      working-directory: js/frontend

    - name: Instance CycloneDX
      run: npm install --global @cyclonedx/cyclonedx-npm
      shell: bash

    # This step generates a Source Bill of Materials (SBOM) package that captures all the dependencies compiled
    # into the application.
    - name: Generate SBOM
      run: cyclonedx-npm --ignore-npm-errors --output-file bom.json
      shell: bash
      working-directory: js/frontend

    - name: Set version
      run: |
        jq '.frontendVersion = "v${{ env.PACKAGE_VERSION }}"' config.json > /tmp/config.json
        mv /tmp/config.json config.json
      shell: bash
      working-directory: js/frontend/public

    - name: Build App
      run: yarn run build
      shell: bash
      working-directory: js/frontend

    # The Docker image is built and pushed.
    - name: Build, tag, and push image to Dockerhub
      run: |
        docker buildx build -f Dockerfile -t harrisonmeister/cf-octopub-frontend:${{ env.PACKAGE_VERSION }} -t harrisonmeister/cf-octopub-frontend:latest --platform=linux/amd64 --push .
      shell: bash
      working-directory: js/frontend

    - name: report image by action
      uses: codefresh-io/codefresh-report-image@latest
      with:
        CF_RUNTIME_NAME: 'local-k3s02'
        CF_API_KEY: ${{ inputs.codefresh_token }}
        CF_CONTAINER_REGISTRY_INTEGRATION: 'harrisonmeister-dockerhub'
        CF_GIT_BRANCH: ${{ github.ref_name }}
        CF_IMAGE: docker.io/${{ inputs.dockerhub_username }}/cf-octopub-frontend:${{ env.PACKAGE_VERSION }}
        CF_GITHUB_TOKEN: ${{ inputs.github_codefresh_token }}    
        CF_ISSUE_TRACKING_INTEGRATION: 'harrisonmeister-jira' 
        CF_JIRA_MESSAGE: 'OC-1'
        CF_JIRA_PROJECT_PREFIX: "OC"
    
    - name: Clone GitOps repo
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.gitops_repo }}
        token: ${{ inputs.gitops_repo_user_token }}
        ref: main
        path: gitops-repo
        fetch-depth: 0
    
    - name: Bump image tags in dev helm files
      shell: bash
      run: |
        cd gitops-repo/octopub/helm/${{ inputs.gitops_repo_service_directory }}/development
        yq e -i '.appVersion = "${{ env.PACKAGE_VERSION }}"' Chart.yaml
        yq e -i '.images[0].newTag = "${{ env.PACKAGE_VERSION }}"' values.yaml

    - name: Commit and push changes to GitOps repo
      shell: bash
      run: |
        cd gitops-repo/octopub/helm/${{ inputs.gitops_repo_service_directory }}/development
        git config user.name "${{ inputs.gitops_repo_username }}"
        git config user.email "${{ inputs.gitops_repo_user_email }}"
        git pull origin main
        git add Chart.yaml values.yaml
        git commit -m "Auto-Promotion: ${{ inputs.gitops_commit_message }}"
        git push origin main       